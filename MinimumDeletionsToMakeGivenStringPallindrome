package com.dsa.m_dynamicprogramming.lcs;

public class MinimumDeletionsToMakeGivenStringPallindrome {

	private static int longestPallidromicSubsequence(String s1, String s2, int len1, int len2) {
		if (len1 == 0 || len2 == 0) {
			return 0;
		}

		if (s1.charAt(len1 - 1) == s2.charAt(len2 - 1)) {
			return 1 + longestPallidromicSubsequence(s1, s2, len1 - 1, len2 - 1);
		} else {
			int l1 = longestPallidromicSubsequence(s1, s2, len1 - 1, len2);
			int l2 = longestPallidromicSubsequence(s1, s2, len1, len2 - 1);
			return l1 >= l2 ? l1 : l2;
		}
	}

	/**
	 * This question is similar to the longest pallindromic subsequence question.
	 */
	public static void main(String[] args) {

		/** Input string */
		String s1 = "agbckba";

		/** Derived string */
		String s2 = new StringBuilder(s1).reverse().toString();

		int len1 = s1.length();
		int len2 = s2.length();

		int lps = longestPallidromicSubsequence(s1, s2, len1, len2);
		int ans = s1.length() - lps;

		System.out.println("Number of deletions required to make the string " + s1 + " a pallindrome is : " + ans);

	}

}
