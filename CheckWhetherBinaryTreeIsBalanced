package com.dsa.f_binarytree;

import java.util.Stack;

public class CheckWhetherBinaryTreeIsBalanced {

	static Node rootNode;

	private static class Pair {

		Node node;
		int state;

		Pair(Node node, int state) {
			this.node = node;
			this.state = state;
		}

	}

	private static void construct(int[] arr) {
		Stack<Pair> stack = new Stack<>();
		Node node = new Node(arr[0], null, null);
		rootNode = node;
		Pair rootPair = new Pair(node, 1);
		stack.push(rootPair);

		int idx = 0;
		while (!stack.isEmpty()) {
			Pair top = stack.peek();

			if (top.state == 1) {
				idx++;
				if (arr[idx] != -1) {
					Node leftNode = new Node(arr[idx], null, null);
					top.node.left = leftNode;
					stack.push(new Pair(leftNode, 1));
				} else {
					top.node.left = null;
				}
				top.state++;
			} else if (top.state == 2) {
				idx++;
				if (arr[idx] != -1) {
					Node rightNode = new Node(arr[idx], null, null);
					top.node.right = rightNode;
					stack.push(new Pair(rightNode, 1));
				} else {
					top.node.right = null;
				}
				top.state++;
			} else {
				stack.pop();
			}
		}
	}

	static class MyPair {
		int height;
		boolean isBalanced;

		public MyPair() {

		}

		public MyPair(int height, boolean isBalanced) {
			this.height = height;
			this.isBalanced = isBalanced;
		}

	}

	private static MyPair isBalanced(Node node) {
		if (node == null) {
			return new MyPair(-1, true);
		}

		MyPair left = isBalanced(node.left);
		MyPair right = isBalanced(node.right);

		MyPair parent = new MyPair();
		parent.isBalanced = left.isBalanced && right.isBalanced && Math.abs(left.height - right.height) <= 1;
		parent.height = Math.max(left.height, right.height) + 1;

		return parent;
	}

	private static boolean isBalanced = true;

	private static int isBalancedChangeAndReturn(Node node) {
		if (node == null) {
			return -1;
		}

		int left = isBalancedChangeAndReturn(node.left);
		int right = isBalancedChangeAndReturn(node.right);

		boolean balanced = Math.abs(left - right) <= 1;
		isBalanced = isBalanced && balanced;

		return Math.max(left, right) + 1;
	}

	public static void main(String[] args) {
		int[] arr = new int[] { 50, 60, 30, 40, -1, -1, -1, -1, 70, 80, 90, -1, -1, -1, -1 };
		construct(arr);

		System.out.println(isBalanced(rootNode).isBalanced);

		isBalancedChangeAndReturn(rootNode);
		System.out.println(isBalanced);
	}

}
